{"version":3,"sources":["GlobalContext.tsx","icons/moon-solid.svg","icons/moon-regular.svg","components/Header.tsx","components/Card.tsx","icons/arrow-back-white.svg","icons/arrow-back-dark.svg","components/SpecificCountry.tsx","components/borderCountry.tsx","components/AllCountries.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["initialState","countryData","allData","dispatch","mode","reducer","state","action","type","isLoading","payload","error","GlobalContext","createContext","GlobalProvider","children","link","useReducer","a","fetch","json","data","console","log","useEffect","fetchData","Provider","value","HeaderContainer","styled","header","Header","useContext","className","to","onClick","src","nightTime","alt","dayLight","Container","div","Wrapper","Form","form","Image","img","ItemWrapper","Card","useState","searchCountry","setSearchCountry","onChange","e","target","filterData","filter","name","toLowerCase","includes","placeholder","filterRegion","region","map","flag","style","margin","population","capital","SpecificCountryContainer","Button","button","Icon","Details","SCTitle","h3","SpecificCountry","useParams","findCountry","find","arrowBackWhite","arrowBackDark","nativeName","subregion","topLevelDomain","index","currencies","borders","length","findCity","item","alpha3Code","alpha2Code","BorderCountryContainer","section","BCTitle","BorderCountry","border","AllCountries","exact","path","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAQIA,EAAsB,CACxBC,YAAa,GACbC,QAAS,GACTC,SAAU,kBAAM,MAChBC,MAAM,GAuER,SAASC,IAAsD,IAA9CC,EAA6C,uDAA9BN,EAAcO,EAAgB,uCAC5D,OAAQA,EAAOC,MACb,IAAK,WACH,OAAO,2BACFF,GADL,IAEEG,WAAW,EACXP,QAASK,EAAOG,QAChBT,YAAaM,EAAOG,QACpBC,MAAO,OAEX,IAAK,iBAKL,IAAK,mBACH,OAAO,2BACFL,GADL,IAEEL,YAAaM,EAAOG,UAExB,IAAK,cACH,OAAO,2BACFJ,GADL,IAEEF,KAAMG,EAAOG,UAEjB,QACE,OAAOJ,GAIN,I,EAAMM,EAAgBC,wBAAcb,GAgC5Bc,EA9BkB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC5BC,EAAI,uCADuC,EAEvBC,qBAAWZ,EAASL,GAFG,mBAE1CM,EAF0C,KAEnCH,EAFmC,iDAIjD,8BAAAe,EAAA,sEAC4BC,MAAMH,GADlC,cACQf,EADR,gBAEqBA,EAAYmB,OAFjC,OAEQC,EAFR,OAGEC,QAAQC,IAAIF,GAEZlB,EAAS,CAAEK,KAAM,WAAYE,QAASW,IALxC,4CAJiD,sBAgBjD,OAJAG,qBAAU,YAZuC,mCAa/CC,KACC,IAGD,cAACb,EAAcc,SAAf,CACEC,MAAO,CACL1B,YAAaK,EAAML,YACnBC,QAASI,EAAMJ,QACfE,KAAME,EAAMF,KACZD,YALJ,SAQGY,KC5IQ,MAA0B,uCCA1B,MAA0B,yC,OCOnCa,EAAkBC,IAAOC,OAAV,kKASN,SAASC,IAAU,IAAD,EACJC,qBAAWpB,GAA9BR,EADuB,EACvBA,KAAMD,EADiB,EACjBA,SAMd,OACE,eAACyB,EAAD,CAAiBK,UAAS,UAAK7B,EAAO,eAAiB,cAA7B,WAA1B,UACE,6BACE,cAAC,IAAD,CAAM8B,GAAG,IAAT,mCAEF,qBAAKD,UAAU,OAAOE,QATT,WACfhC,EAAS,CAAEK,KAAM,cAAeE,SAAUN,KAQxC,SACGA,EACC,iCACE,qBAAKgC,IAAKC,EAAWC,IAAI,YAAYL,UAAU,SADjD,gBAKA,iCACE,qBAAKG,IAAKG,EAAUD,IAAI,aAAaL,UAAU,SADjD,qB,oBC9BJO,EAAYX,IAAOY,IAAV,kKASTC,EAAUb,IAAOY,IAAV,8aAqBPE,EAAOd,IAAOe,KAAV,yOAWJC,EAAQhB,IAAOiB,IAAV,6FAKLC,EAAclB,IAAOY,IAAV,sGAOF,SAASO,IAAQ,IAAD,EACoBhB,qBAAWpB,GAApDX,EADqB,EACrBA,YAAaC,EADQ,EACRA,QAASE,EADD,EACCA,KAAMD,EADP,EACOA,SADP,EAEa8C,mBAAS,IAFtB,mBAEtBC,EAFsB,KAEPC,EAFO,KAwF7B,OACE,eAACX,EAAD,WACE,eAACG,EAAD,WACE,uBACEnC,KAAK,OACL4C,SAjFW,SAACC,GAClB,IAAMT,EAAOS,EAAEC,OACfH,EAAiBP,EAAKjB,OACtB,IAAM4B,EAAarD,EAAQsD,QACzB,SAACnC,GAAD,OAwDMA,EAAKoC,KAAKC,cAAcC,SAASf,EAAKjB,MAAM+B,kBAEpDvD,EAAS,CAAEK,KAAM,iBAAkBE,QAAS6C,KAoBtCtB,UAAS,UAAK7B,EAAO,mBAAqB,mBAC1CuB,MAAOuB,EACPU,YAAY,4BAEd,wBACER,SAtBe,SAACC,GACtB,IAAMQ,EAAe3D,EAAQsD,QAC3B,SAACnC,GAAD,OAAeA,EAAKyC,SAAWT,EAAEC,OAAO3B,SAEnB,kBAAnB0B,EAAEC,OAAO3B,MACXxB,EAAS,CAAEK,KAAM,mBAAoBE,QAASR,IAE9CC,EAAS,CAAEK,KAAM,mBAAoBE,QAASmD,KAgB1C5B,UAAS,UAAK7B,EAAO,oBAAsB,oBAF7C,SA/FmB,CACvB,gBACA,SACA,WACA,OACA,SACA,WA6Fc2D,KAAI,SAAC1C,GAAD,OACV,wBAAQM,MAAON,EAAf,SACGA,GADuBA,WAMhC,cAACqB,EAAD,UACGzC,EAAY8D,KACX,SAAC1C,GAAD,OAOE,qBACEY,UAAS,UAAK7B,EAAO,aAAe,YAA3B,SADX,SAIE,cAAC,IAAD,CAAM8B,GAAE,mBAAcb,EAAKoC,MAA3B,SACE,gCACE,cAACZ,EAAD,CAAOT,IAAKf,EAAK2C,KAAM1B,IAAI,SAC3B,eAACS,EAAD,WACE,oBAAIkB,MAAO,CAAEC,OAAQ,KAArB,SAA6B7C,EAAKoC,OAClC,+BACE,+BACE,+CADF,IAC4BpC,EAAK8C,cAEjC,+BACE,2CADF,IACwB9C,EAAKyC,UAE7B,+BACE,4CADF,IACyBzC,EAAK+C,uBAfjC/C,EAAKoC,c,uCClLT,MAA0B,6CCA1B,MAA0B,4CCOnCY,EAA2BxC,IAAOY,IAAV,uRAcxB6B,GAASzC,IAAO0C,OAAV,4GAONC,GAAO3C,IAAOiB,IAAV,gDAIJJ,GAAUb,IAAOY,IAAV,gMAWPI,GAAQhB,IAAOiB,IAAV,qIAQL2B,GAAU5C,IAAOY,IAAV,sFAMPiC,GAAU7C,IAAO8C,GAAV,oKAUE,SAASC,KAAmB,IAAD,EACd5C,qBAAWpB,GAA7BV,EADgC,EAChCA,QAASE,EADuB,EACvBA,KACXqD,EAAyBoB,cACzBC,EAAc5E,EAAQ6E,MAC1B,SAAC1D,GAAD,OAiBMA,EAAKoC,OAASA,EAAKA,QAG3B,OACE,eAACY,EAAD,CACEpC,UAAS,UAAK7B,EAAO,kBAAoB,iBAAhC,cADX,UAGE,cAAC,IAAD,CAAM8B,GAAG,IAAT,SACE,eAACoC,GAAD,CAAQrC,UAAS,UAAK7B,EAAO,kBAAoB,kBAAjD,UACGA,EACC,cAACoE,GAAD,CAAMpC,IAAK4C,EAAgB1C,IAAI,eAE/B,cAACkC,GAAD,CAAMpC,IAAK6C,EAAe3C,IAAI,eAC7B,IALL,YASF,eAAC,GAAD,WACE,cAAC,GAAD,CAAOF,IAAK0C,EAAYd,KAAM1B,IAAI,SAClC,eAACmC,GAAD,WACE,cAACC,GAAD,UAAUI,EAAYrB,OACtB,+BACE,+BACE,6CADF,IACuBqB,EAAYI,cAEnC,+BACE,4CADF,IACsBJ,EAAYX,cAElC,+BACE,wCADF,IACkBW,EAAYhB,UAE9B,+BACE,4CADF,IACsBgB,EAAYK,aAElC,+BACE,yCADF,IACmBL,EAAYV,cAGjC,+BACE,+BACE,kDACCU,EAAYM,eAAerB,KAC1B,SAAC1C,EAAgBgE,GAAjB,OACE,8BAAwBhE,GAAdA,EAAKgE,UAIrB,+BACE,4CACCP,EAAYQ,WAAWvB,KAAI,SAAC1C,GAAD,OAC1B,8BAAsBA,EAAKoC,MAAjBpC,EAAKoC,eAQrB,8BACGqB,EAAYS,QAAQC,OAAS,EAC5B,gCACE,iDACA,6BACGV,EAAYS,QAAQxB,KAAI,SAAC1C,EAAcgE,GACtC,IAAMI,EAAWvF,EAAQ6E,MACvB,SAACW,GAAD,OACEA,EAAKC,aAAetE,GAAQqE,EAAKE,aAAevE,KAGpD,OACE,cAAC,IAAD,CAAwBa,GAAE,kBAAab,GAAvC,SACE,wBACEY,UAAS,UACP7B,EAAO,oBAAsB,oBAFjC,SAKGqF,GAAYA,EAAShC,QANfpC,EAAKgE,YAcxB,+ECrKd,IAAMQ,GAAyBhE,IAAOiE,QAAV,uRActBpD,GAAUb,IAAOY,IAAV,gMAWP6B,GAASzC,IAAO0C,OAAV,4GAONC,GAAO3C,IAAOiB,IAAV,gDAIJD,GAAQhB,IAAOiB,IAAV,qIAQL2B,GAAU5C,IAAOY,IAAV,sFAMPsD,GAAUlE,IAAO8C,GAAV,oKAUE,SAASqB,KAAiB,IAAD,EACZhE,qBAAWpB,GAA7BV,EAD8B,EAC9BA,QAASE,EADqB,EACrBA,KACX6F,EAA6BpB,cAE7BC,EAAc5E,EAAQ6E,MAC1B,SAAC1D,GAAD,OAYMA,EAAKsE,aAAeM,EAAOA,UAGnC,OACE,eAACJ,GAAD,CACE5D,UAAS,UAAK7B,EAAO,kBAAoB,iBAAhC,cADX,UAGE,cAAC,IAAD,CAAM8B,GAAG,IAAT,SACE,eAAC,GAAD,CAAQD,UAAS,UAAK7B,EAAO,kBAAoB,kBAAjD,UACGA,EACC,cAAC,GAAD,CAAMgC,IAAK4C,EAAgB1C,IAAI,eAE/B,cAAC,GAAD,CAAMF,IAAK6C,EAAe3C,IAAI,eAC7B,IALL,YASF,eAAC,GAAD,WACE,cAAC,GAAD,CAAOF,IAAK0C,EAAYd,KAAM1B,IAAI,SAClC,eAAC,GAAD,WACE,cAACyD,GAAD,UAAUjB,EAAYrB,OACtB,+BACE,+BACE,6CADF,IACuBqB,EAAYI,cAEnC,+BACE,4CADF,IACsBJ,EAAYX,cAElC,+BACE,wCADF,IACkBW,EAAYhB,UAE9B,+BACE,4CADF,IACsBgB,EAAYK,aAElC,+BACE,yCADF,IACmBL,EAAYV,cAGjC,+BACE,+BACE,kDACCU,EAAYM,eAAerB,KAC1B,SAAC1C,EAAgBgE,GAAjB,OACE,8BAAwBhE,GAAdA,EAAKgE,UAIrB,+BACE,4CACCP,EAAYQ,WAAWvB,KAAI,SAAC1C,GAAD,OAC1B,8BAAsBA,EAAKoC,MAAjBpC,EAAKoC,eAQrB,mDAEE,6BACE,8BACGqB,EAAYS,QAAQC,OAAS,EAC5B,mDAEE,6BACGV,EAAYS,QAAQxB,KACnB,SAAC1C,EAAcgE,GACb,IAAMI,EAAWvF,EAAQ6E,MACvB,SAACW,GAAD,OACEA,EAAKC,aAAetE,KAGxB,OACE,cAAC,IAAD,CAAwBa,GAAE,kBAAab,GAAvC,SACE,wBACEY,UAAS,UACP7B,EACI,oBACA,oBAJR,SAOGqF,GAAYA,EAAShC,QARfpC,EAAKgE,YAiB1B,oFCzKH,SAASa,KACtB,OACE,8BACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACE,cAACpD,EAAD,MAEF,cAAC,IAAD,CAAOmD,OAAK,EAACC,KAAK,iBAAlB,SACE,cAACxB,GAAD,MAEF,cAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,kBAAlB,SACE,cAACJ,GAAD,WCAKK,OAXf,WAAgB,IACNjG,EAAS4B,qBAAWpB,GAApBR,KAER,OACE,sBAAK6B,UAAS,UAAK7B,EAAO,aAAe,aAAzC,UACE,cAAC2B,EAAD,IACA,cAACmE,GAAD,QCESI,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,UACE,cAAC,IAAD,UACE,cAAC,GAAD,UAINC,SAASC,eAAe,SAG1Bb,O","file":"static/js/main.0ab8ebd6.chunk.js","sourcesContent":["import React, { createContext, useReducer, useEffect } from \"react\";\r\ntype State = {\r\n  countryData: any;\r\n  allData: any;\r\n  dispatch: React.Dispatch<any>;\r\n  mode: boolean;\r\n};\r\n\r\nlet initialState: State = {\r\n  countryData: [],\r\n  allData: [],\r\n  dispatch: () => null,\r\n  mode: false,\r\n};\r\n\r\ntype Country = [\r\n  {\r\n    name: string;\r\n    topLevelDomain: string[];\r\n    alpha2Code: string;\r\n    alpha3Code: string;\r\n    callingCodes: string[];\r\n    capital: string;\r\n    altSpellings: string[];\r\n    region: string;\r\n    subregion: string;\r\n    population: number;\r\n    latlng: number[];\r\n    demonym: string;\r\n    area: number;\r\n    gini: number;\r\n    timezones: string[];\r\n    borders: string[];\r\n    nativeName: string;\r\n    numericCode: string;\r\n    currencies: [\r\n      {\r\n        code: string;\r\n        name: string;\r\n        symbol: string;\r\n      }\r\n    ];\r\n    languages: [\r\n      {\r\n        iso639_1: string;\r\n        iso639_2: string;\r\n        name: string;\r\n        nativeName: string;\r\n      }\r\n    ];\r\n    translations: {\r\n      de: string;\r\n      es: string;\r\n      fr: string;\r\n      ja: string;\r\n      it: string;\r\n      br: string;\r\n      pt: string;\r\n      nl: string;\r\n      hr: string;\r\n      fa: string;\r\n    };\r\n    flag: string;\r\n    regionalBlocs: [\r\n      {\r\n        acronym: string;\r\n        name: string;\r\n        otherAcronyms: string[];\r\n        otherNames: string[];\r\n      }\r\n    ];\r\n    cioc: string;\r\n  }\r\n];\r\n\r\ntype Action =\r\n  | { type: \"LOADING\"; payload: boolean }\r\n  | { type: \"RESOLVED\"; payload: Country[] }\r\n  | { type: \"SEARCH_COUNTRY\"; payload: Country[] }\r\n  | { type: \"SEARCH_BY_REGION\"; payload: Country[] }\r\n  | { type: \"CHANGE_MODE\"; payload: boolean }\r\n  | { type: \"ERROR\"; payload: string };\r\n\r\nfunction reducer(state: State = initialState, action: Action) {\r\n  switch (action.type) {\r\n    case \"RESOLVED\":\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        allData: action.payload,\r\n        countryData: action.payload,\r\n        error: null,\r\n      };\r\n    case \"SEARCH_COUNTRY\":\r\n      return {\r\n        ...state,\r\n        countryData: action.payload,\r\n      };\r\n    case \"SEARCH_BY_REGION\":\r\n      return {\r\n        ...state,\r\n        countryData: action.payload,\r\n      };\r\n    case \"CHANGE_MODE\":\r\n      return {\r\n        ...state,\r\n        mode: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const GlobalContext = createContext(initialState);\r\n\r\nconst GlobalProvider: React.FC = ({ children }) => {\r\n  const link = `https://restcountries.eu/rest/v2/all`;\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  async function fetchData() {\r\n    const countryData = await fetch(link);\r\n    const data = await countryData.json();\r\n    console.log(data);\r\n\r\n    dispatch({ type: \"RESOLVED\", payload: data });\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <GlobalContext.Provider\r\n      value={{\r\n        countryData: state.countryData,\r\n        allData: state.allData,\r\n        mode: state.mode,\r\n        dispatch,\r\n      }}\r\n    >\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n\r\nexport default GlobalProvider;\r\n","export default __webpack_public_path__ + \"static/media/moon-solid.b23d5034.svg\";","export default __webpack_public_path__ + \"static/media/moon-regular.cd243273.svg\";","import React, { useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { GlobalContext } from \"./../GlobalContext\";\r\nimport dayLight from \"../icons/moon-solid.svg\";\r\nimport nightTime from \"../icons/moon-regular.svg\";\r\nimport styled from \"styled-components\";\r\n\r\nconst HeaderContainer = styled.header`\r\n  padding-left: 18px;\r\n  padding-right: 18px;\r\n  @media (min-width: 650px) {\r\n    padding-left: 80px;\r\n    padding-right: 80px;\r\n  }\r\n`;\r\n\r\nexport default function Header() {\r\n  const { mode, dispatch } = useContext(GlobalContext);\r\n\r\n  const darkMode = () => {\r\n    dispatch({ type: \"CHANGE_MODE\", payload: !mode });\r\n  };\r\n\r\n  return (\r\n    <HeaderContainer className={`${mode ? \"light-header\" : \"dark-header\"} header`}>\r\n      <h3>\r\n        <Link to=\"/\">Where in the world?</Link>\r\n      </h3>\r\n      <div className=\"mode\" onClick={darkMode}>\r\n        {mode ? (\r\n          <span>\r\n            <img src={nightTime} alt=\"dark-moon\" className=\"moon\" />\r\n            Light mode\r\n          </span>\r\n        ) : (\r\n          <span>\r\n            <img src={dayLight} alt=\"light-moon\" className=\"moon\" /> Dark mode\r\n          </span>\r\n        )}\r\n      </div>\r\n    </HeaderContainer>\r\n  );\r\n}\r\n","import React, { useContext, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { GlobalContext } from \"./../GlobalContext\";\r\n\r\nconst Container = styled.div`\r\n  padding-left: 18px;\r\n  padding-right: 18px;\r\n  @media (min-width: 650px) {\r\n    padding-left: 80px;\r\n    padding-right: 80px;\r\n  }\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  padding-top: 64px;\r\n  padding-bottom: 64px;\r\n  padding-left: 65px;\r\n  padding-right: 64px;\r\n  display: grid;\r\n  grid-gap: 64px;\r\n  justify-items: center;\r\n\r\n  @media (min-width: 650px) {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n\r\n  @media (min-width: 900px) {\r\n    grid-template-columns: repeat(3, 1fr);\r\n  }\r\n  @media (min-width: 1200px) {\r\n    grid-template-columns: repeat(4, 1fr);\r\n  }\r\n`;\r\n\r\nconst Form = styled.form`\r\n  margin-top: 56px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 50px;\r\n  @media (min-width: 650px) {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n  }\r\n`;\r\nconst Image = styled.img`\r\n  border-top-left-radius: 6px;\r\n  border-top-right-radius: 6px;\r\n`;\r\n\r\nconst ItemWrapper = styled.div`\r\n  padding: 16px;\r\n  @media (min-width: 300px) {\r\n    padding: 30px;\r\n  }\r\n`;\r\n\r\nexport default function Card() {\r\n  const { countryData, allData, mode, dispatch } = useContext(GlobalContext);\r\n  const [searchCountry, setSearchCountry] = useState(\"\");\r\n  const region: string[] = [\r\n    \"All countries\",\r\n    \"Africa\",\r\n    \"Americas\",\r\n    \"Asia\",\r\n    \"Europe\",\r\n    \"Oceania\",\r\n  ];\r\n\r\n  const searchData = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const form = e.target;\r\n    setSearchCountry(form.value);\r\n    const filterData = allData.filter(\r\n      (data: {\r\n        name: string;\r\n        topLevelDomain: string[];\r\n        alpha2Code: string;\r\n        alpha3Code: string;\r\n        callingCodes: string[];\r\n        capital: string;\r\n        altSpellings: string[];\r\n        region: string;\r\n        subregion: string;\r\n        population: number;\r\n        latlng: number[];\r\n        demonym: string;\r\n        area: number;\r\n        gini: number;\r\n        timezones: string[];\r\n        borders: string[];\r\n        nativeName: string;\r\n        numericCode: string;\r\n        currencies: [\r\n          {\r\n            code: string;\r\n            name: string;\r\n            symbol: string;\r\n          }\r\n        ];\r\n        languages: [\r\n          {\r\n            iso639_1: string;\r\n            iso639_2: string;\r\n            name: string;\r\n            nativeName: string;\r\n          }\r\n        ];\r\n        translations: {\r\n          de: string;\r\n          es: string;\r\n          fr: string;\r\n          ja: string;\r\n          it: string;\r\n          br: string;\r\n          pt: string;\r\n          nl: string;\r\n          hr: string;\r\n          fa: string;\r\n        };\r\n        flag: string;\r\n        regionalBlocs: [\r\n          {\r\n            acronym: string;\r\n            name: string;\r\n            otherAcronyms: string[];\r\n            otherNames: string[];\r\n          }\r\n        ];\r\n        cioc: string;\r\n      }) => data.name.toLowerCase().includes(form.value.toLowerCase())\r\n    );\r\n    dispatch({ type: \"SEARCH_COUNTRY\", payload: filterData });\r\n  };\r\n\r\n  const searchByRegion = (e: any) => {\r\n    const filterRegion = allData.filter(\r\n      (data: any) => data.region === e.target.value\r\n    );\r\n    if (e.target.value === \"All countries\") {\r\n      dispatch({ type: \"SEARCH_BY_REGION\", payload: allData });\r\n    } else {\r\n      dispatch({ type: \"SEARCH_BY_REGION\", payload: filterRegion });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Form>\r\n        <input\r\n          type=\"text\"\r\n          onChange={searchData}\r\n          className={`${mode ? \"input-light-mode\" : \"input-dark-mode\"}`}\r\n          value={searchCountry}\r\n          placeholder=\"Search for a country...\"\r\n        />\r\n        <select\r\n          onChange={searchByRegion}\r\n          className={`${mode ? \"select-light-mode\" : \"select-dark-mode\"}`}\r\n        >\r\n          {region.map((data) => (\r\n            <option value={data} key={data}>\r\n              {data}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </Form>\r\n      <Wrapper>\r\n        {countryData.map(\r\n          (data: {\r\n            name: string;\r\n            flag: string;\r\n            population: number;\r\n            region: string;\r\n            capital: string;\r\n          }) => (\r\n            <div\r\n              className={`${mode ? \"light-card\" : \"dark-card\"} card`}\r\n              key={data.name}\r\n            >\r\n              <Link to={`/country/${data.name}`}>\r\n                <div>\r\n                  <Image src={data.flag} alt=\"flag\" />\r\n                  <ItemWrapper>\r\n                    <h3 style={{ margin: \"0\" }}>{data.name}</h3>\r\n                    <ul>\r\n                      <li>\r\n                        <span>Population:</span> {data.population}\r\n                      </li>\r\n                      <li>\r\n                        <span>Region:</span> {data.region}\r\n                      </li>\r\n                      <li>\r\n                        <span>Capital:</span> {data.capital}\r\n                      </li>\r\n                    </ul>\r\n                  </ItemWrapper>\r\n                </div>\r\n              </Link>\r\n            </div>\r\n          )\r\n        )}\r\n      </Wrapper>\r\n    </Container>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/arrow-back-white.a7968dae.svg\";","export default __webpack_public_path__ + \"static/media/arrow-back-dark.39940f16.svg\";","import React, { useContext } from \"react\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport arrowBackWhite from \"../icons/arrow-back-white.svg\";\r\nimport arrowBackDark from \"../icons/arrow-back-dark.svg\";\r\nimport styled from \"styled-components\";\r\nimport { GlobalContext } from \"./../GlobalContext\";\r\n\r\nconst SpecificCountryContainer = styled.div`\r\n  height: 100%;\r\n  padding-left: 18px;\r\n  padding-right: 18px;\r\n  padding-top: 64px;\r\n  padding-bottom: 64px;\r\n  @media (min-width: 650px) {\r\n    padding-left: 80px;\r\n    padding-right: 80px;\r\n    padding-top: 128px;\r\n    padding-bottom: 128px;\r\n  }\r\n`;\r\n\r\nconst Button = styled.button`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  gap: 18px;\r\n`;\r\n\r\nconst Icon = styled.img`\r\n  max-width: 32px;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  height: 100vh;\r\n  margin-top: 102.4px;\r\n  @media (min-width: 650px) {\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap: 64px;\r\n    flex-wrap: nowrap;\r\n  }\r\n`;\r\n\r\nconst Image = styled.img`\r\n  @media (min-width: 650px) {\r\n    flex-basis: 50%;\r\n    max-width: 50%;\r\n    height: max-content;\r\n  }\r\n`;\r\n\r\nconst Details = styled.div`\r\n  @media (min-width: 650px) {\r\n    flex-basis: 50%;\r\n  }\r\n`;\r\n\r\nconst SCTitle = styled.h3`\r\n  font-size: 28px;\r\n  @media (min-width: 300px) {\r\n    font-size: 32px;\r\n  }\r\n  @media (min-width: 800px) {\r\n    font-size: 52px;\r\n  }\r\n`;\r\n\r\nexport default function SpecificCountry() {\r\n  const { allData, mode } = useContext(GlobalContext);\r\n  const name: { name: string } = useParams();\r\n  const findCountry = allData.find(\r\n    (data: {\r\n      flag: string;\r\n      name: string;\r\n      nativeName: string;\r\n      population: number;\r\n      region: string;\r\n      subregion: string;\r\n      capital: string;\r\n      currencies: { name: string };\r\n      topLevelDomain: string[];\r\n      // languages: {\r\n      //   name: string;\r\n      //   iso639_1: string;\r\n      //   iso639_2: string;\r\n      //   nativeName: string;\r\n      // };\r\n      borders: string[];\r\n    }) => data.name === name.name\r\n  );\r\n\r\n  return (\r\n    <SpecificCountryContainer\r\n      className={`${mode ? \"light-container\" : \"dark-container\"} container`}\r\n    >\r\n      <Link to=\"/\">\r\n        <Button className={`${mode ? \"back-light-mode\" : \"back-dark-mode\"}`}>\r\n          {mode ? (\r\n            <Icon src={arrowBackWhite} alt=\"back-arrow\" />\r\n          ) : (\r\n            <Icon src={arrowBackDark} alt=\"back-arrow\" />\r\n          )}{\" \"}\r\n          Back\r\n        </Button>\r\n      </Link>\r\n      <Wrapper>\r\n        <Image src={findCountry.flag} alt=\"flag\" />\r\n        <Details>\r\n          <SCTitle>{findCountry.name}</SCTitle>\r\n          <ul>\r\n            <li>\r\n              <b>Native Name:</b> {findCountry.nativeName}\r\n            </li>\r\n            <li>\r\n              <b>Population:</b> {findCountry.population}\r\n            </li>\r\n            <li>\r\n              <b>Region:</b> {findCountry.region}\r\n            </li>\r\n            <li>\r\n              <b>Sub Region:</b> {findCountry.subregion}\r\n            </li>\r\n            <li>\r\n              <b>Capital:</b> {findCountry.capital}\r\n            </li>\r\n          </ul>\r\n          <ul>\r\n            <li>\r\n              <b>Top Level Domain:</b>\r\n              {findCountry.topLevelDomain.map(\r\n                (data: string[], index: number) => (\r\n                  <div key={data[index]}>{data}</div>\r\n                )\r\n              )}\r\n            </li>\r\n            <li>\r\n              <b>Currencies:</b>\r\n              {findCountry.currencies.map((data: { name: string }) => (\r\n                <div key={data.name}>{data.name}</div>\r\n              ))}\r\n            </li>\r\n            {/* <li>\r\n            Languages:\r\n            {findCountry.languages.map((data: { name: string }) => data)}\r\n          </li> */}\r\n          </ul>\r\n          <div>\r\n            {findCountry.borders.length > 0 ? (\r\n              <div>\r\n                <b>Border countries</b>\r\n                <ul>\r\n                  {findCountry.borders.map((data: string, index: number) => {\r\n                    const findCity = allData.find(\r\n                      (item: { alpha3Code: string; alpha2Code: string }) =>\r\n                        item.alpha3Code === data || item.alpha2Code === data\r\n                    );\r\n\r\n                    return (\r\n                      <Link key={data[index]} to={`/border/${data}`}>\r\n                        <button\r\n                          className={`${\r\n                            mode ? \"button-light-mode\" : \"button-dark-mode\"\r\n                          }`}\r\n                        >\r\n                          {findCity && findCity.name}\r\n                        </button>\r\n                      </Link>\r\n                    );\r\n                  })}\r\n                </ul>\r\n              </div>\r\n            ) : (\r\n              <p>This country has no border country.</p>\r\n            )}\r\n          </div>\r\n        </Details>\r\n      </Wrapper>\r\n    </SpecificCountryContainer>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport arrowBackWhite from \"../icons/arrow-back-white.svg\";\r\nimport arrowBackDark from \"../icons/arrow-back-dark.svg\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport { GlobalContext } from \"./../GlobalContext\";\r\n\r\nconst BorderCountryContainer = styled.section`\r\n  height: 100%;\r\n  padding-left: 18px;\r\n  padding-right: 18px;\r\n  padding-top: 64px;\r\n  padding-bottom: 64px;\r\n  @media (min-width: 650px) {\r\n    padding-left: 80px;\r\n    padding-right: 80px;\r\n    padding-top: 128px;\r\n    padding-bottom: 128px;\r\n  }\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  height: 100vh;\r\n  margin-top: 102.4px;\r\n  @media (min-width: 650px) {\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap: 64px;\r\n    flex-wrap: nowrap;\r\n  }\r\n`;\r\n\r\nconst Button = styled.button`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  gap: 18px;\r\n`;\r\n\r\nconst Icon = styled.img`\r\n  max-width: 32px;\r\n`;\r\n\r\nconst Image = styled.img`\r\n  @media (min-width: 650px) {\r\n    flex-basis: 50%;\r\n    max-width: 50%;\r\n    height: max-content;\r\n  }\r\n`;\r\n\r\nconst Details = styled.div`\r\n  @media (min-width: 650px) {\r\n    flex-basis: 50%;\r\n  }\r\n`;\r\n\r\nconst BCTitle = styled.h3`\r\n  font-size: 28px;\r\n  @media (min-width: 300px) {\r\n    font-size: 32px;\r\n  }\r\n  @media (min-width: 800px) {\r\n    font-size: 52px;\r\n  }\r\n`;\r\n\r\nexport default function BorderCountry() {\r\n  const { allData, mode } = useContext(GlobalContext);\r\n  const border: { border: string } = useParams();\r\n\r\n  const findCountry = allData.find(\r\n    (data: {\r\n      flag: string;\r\n      name: string;\r\n      nativeName: string;\r\n      population: number;\r\n      region: string;\r\n      subregion: string;\r\n      capital: string;\r\n      currencies: { name: string };\r\n      topLevelDomain: string[];\r\n      alpha3Code: string;\r\n      borders: string[];\r\n    }) => data.alpha3Code === border.border\r\n  );\r\n\r\n  return (\r\n    <BorderCountryContainer\r\n      className={`${mode ? \"light-container\" : \"dark-container\"} container`}\r\n    >\r\n      <Link to=\"/\">\r\n        <Button className={`${mode ? \"back-light-mode\" : \"back-dark-mode\"}`}>\r\n          {mode ? (\r\n            <Icon src={arrowBackWhite} alt=\"back-arrow\" />\r\n          ) : (\r\n            <Icon src={arrowBackDark} alt=\"back-arrow\" />\r\n          )}{\" \"}\r\n          Back\r\n        </Button>\r\n      </Link>\r\n      <Wrapper>\r\n        <Image src={findCountry.flag} alt=\"flag\" />\r\n        <Details>\r\n          <BCTitle>{findCountry.name}</BCTitle>\r\n          <ul>\r\n            <li>\r\n              <b>Native Name:</b> {findCountry.nativeName}\r\n            </li>\r\n            <li>\r\n              <b>Population:</b> {findCountry.population}\r\n            </li>\r\n            <li>\r\n              <b>Region:</b> {findCountry.region}\r\n            </li>\r\n            <li>\r\n              <b>Sub Region:</b> {findCountry.subregion}\r\n            </li>\r\n            <li>\r\n              <b>Capital:</b> {findCountry.capital}\r\n            </li>\r\n          </ul>\r\n          <ul>\r\n            <li>\r\n              <b>Top Level Domain:</b>\r\n              {findCountry.topLevelDomain.map(\r\n                (data: string[], index: number) => (\r\n                  <div key={data[index]}>{data}</div>\r\n                )\r\n              )}\r\n            </li>\r\n            <li>\r\n              <b>Currencies:</b>\r\n              {findCountry.currencies.map((data: { name: string }) => (\r\n                <div key={data.name}>{data.name}</div>\r\n              ))}\r\n            </li>\r\n            {/*<li>\r\n            Languages:\r\n            {findCountry.languages.map((data: { name: string }) => data)}\r\n          </li> */}\r\n          </ul>\r\n          <div>\r\n            Border countries\r\n            <ul>\r\n              <div>\r\n                {findCountry.borders.length > 0 ? (\r\n                  <div>\r\n                    Border countries\r\n                    <ul>\r\n                      {findCountry.borders.map(\r\n                        (data: string, index: number) => {\r\n                          const findCity = allData.find(\r\n                            (item: { alpha3Code: string }) =>\r\n                              item.alpha3Code === data\r\n                          );\r\n\r\n                          return (\r\n                            <Link key={data[index]} to={`/border/${data}`}>\r\n                              <button\r\n                                className={`${\r\n                                  mode\r\n                                    ? \"button-light-mode\"\r\n                                    : \"button-dark-mode\"\r\n                                }`}\r\n                              >\r\n                                {findCity && findCity.name}\r\n                              </button>\r\n                            </Link>\r\n                          );\r\n                        }\r\n                      )}\r\n                    </ul>\r\n                  </div>\r\n                ) : (\r\n                  <p>This country has no border country.</p>\r\n                )}\r\n              </div>\r\n            </ul>\r\n          </div>\r\n        </Details>\r\n      </Wrapper>\r\n    </BorderCountryContainer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport SpecificCountry from \"./SpecificCountry\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport BorderCountry from './borderCountry';\r\n\r\nexport default function AllCountries() {\r\n  return (\r\n    <div>\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Card />\r\n        </Route>\r\n        <Route exact path=\"/country/:name\">\r\n          <SpecificCountry />\r\n        </Route>\r\n        <Route exact path=\"/border/:border\">\r\n          <BorderCountry />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\nimport Header from \"./components/Header\";\nimport \"./App.css\";\nimport AllCountries from \"./components/AllCountries\";\nimport { GlobalContext } from \"./GlobalContext\";\n\nfunction App() {\n  const { mode } = useContext(GlobalContext);\n\n  return (\n    <div className={`${mode ? \"light-mode\" : \"dark-mode\"}`}>\n      <Header />\n      <AllCountries />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport GlobalProvider from \"./GlobalContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalProvider>\n      <Router>\n        <App />\n      </Router>\n    </GlobalProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}